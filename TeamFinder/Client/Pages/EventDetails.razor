@page "/EventDetails/{SportEventId}"
@using TeamFinder.Shared.Models
@using TeamFinder.Client.Services

@inject HttpClient http
@inject EventsService _eventsService

<style>
    .padding {
    padding-left: 5px;
    padding-right: 5px;
    padding-bottom: 5px;
    }
</style>

@if (SportEvent != null)
{
    <h2>@SportEvent.Name</h2>
    <MatPaper Elevation="2" class="padding">
        <div class="mat-layout-grid">
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3 mat-headline-4"><b>Name:</b></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3 mat-body1">@SportEvent.Name</div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6"></div>
            </div>
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3 mat-headline-4"><b>City:</b></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3 mat-body1">@SportEvent.Location.City</div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6"></div>
            </div>
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3 mat-headline-4"><b>Date:</b></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3 mat-body1">@SportEvent.Date</div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6"></div>
            </div>
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3 mat-headline-4"><b>Description:</b></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-9 mat-body1">@SportEvent.Description</div>
            </div>
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3 mat-headline-4"><b>Players:</b></div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-9">
                    @if (SortedUsers is not null)
                    {
                        <table>
                            <MatSortHeaderRow Class="demo-h-row" SortChanged="@SortData">
                                <MatSortHeader Class="demo-h" SortId="no">#</MatSortHeader>
                                <MatSortHeader Class="demo-h padding" SortId="name">Username</MatSortHeader>
                                <MatSortHeader Class="demo-h padding" SortId="email">Email</MatSortHeader>
                                <MatSortHeader Class="demo-h padding" SortId="status">Status</MatSortHeader>
                            </MatSortHeaderRow>

                            @foreach (var (i, userEvents) in SortedUsers)
                            {
                                <tr>
                                    <td class="padding">@(i).</td>
                                    <td class="padding">@userEvents.User.UserName</td>
                                    <td class="padding">@userEvents.User.Email</td>
                                    <td class="padding">@userEvents.Type</td>
                                </tr>
                            }
                        </table>
                    }
                </div>
            </div>
        </div>
    <Map SportEvent="@SportEvent" Id="-1" Height="500" Type="Map.MapType.InteractiveMap"></Map>
    </MatPaper>
}
else
{
    @Message
}
@code {

    void SortData(MatSortChangedEvent? sort)
    {
        SortedUsers = Users;
        if (sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)) return;

        Comparison<(int,UserEvents)>? comparison = sort.SortId switch
        {
            "no" => (s1, s2) => s1.Item1.CompareTo(s2.Item1),
            "name" => (s1, s2) => string.Compare(s1.Item2.User.UserName, s2.Item2.User.UserName, StringComparison.InvariantCultureIgnoreCase),
            "email" => (s1, s2) => string.Compare(s1.Item2.User.Email, s2.Item2.User.Email, StringComparison.InvariantCultureIgnoreCase),
            "status" => (s1, s2) => s1.Item2.Type.CompareTo(s2.Item2.Type),
            _ => null
            };
        if (comparison == null) return;
        {
            if (sort.Direction == MatSortDirection.Desc)
            {
                SortedUsers?.Sort( (s1, s2) => -1 * comparison(s1, s2));
            }
            else
            {
               SortedUsers?.Sort((s1, s2) => comparison(s1,s2));
            }
        }
    }
    SportEvent? SportEvent { get; set; }
    string Message { get; set; } = "Loading...";
    [Parameter]
    public string SportEventId { get; set; } = string.Empty;

    List<(int,UserEvents)>? Users { get; set; }
    List<(int,UserEvents)>? SortedUsers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            SportEvent = await _eventsService.GetEvent(SportEventId);
            if (SportEvent is not null)
            {
                var tmp = await _eventsService.GetAllUsersInEvent(SportEvent.Id);
                tmp?.Sort((ue1,ue2) => ue2.Type.CompareTo(ue1.Type));
                Users = tmp?
                    .Select((u,i) => (i+1,u))
                    .ToList();
                
                SortedUsers = Users;
            }
        }
        catch (Exception e)
        {
            //ignore
        }
        finally
        {
            if (SportEvent == null)
                Message = "Event not found";
        }
    }
}