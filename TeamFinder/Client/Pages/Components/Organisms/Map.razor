@using MatBlazor
@using Microsoft.Extensions.Options
@using Newtonsoft.Json
@using TeamFinder.Shared.Models

@inject IJSRuntime _jsRuntime

@implements IDisposable

<MatPaper Outlined="true" Rounded="true">
    <div id="@GetUniqueId(Id)" style="@($"height:{Height}px;")"/>

    <script suppress-error="BL9992" type="text/javascript">
        Loader.async = true;      	      
    </script>
</MatPaper>
<code id="personCodeBlock"></code>
@code { string GetUniqueId(int id) => Id == -1 ? "map" : "map-" + Convert.ToString(Id);

    [Parameter, EditorRequired]
    public int Height { get; set; }

    [Parameter, EditorRequired]
    public SportEvent SportEvent { get; set; } = null!;
    
    [Parameter, EditorRequired]
    public MapType Type { get; set; }

    public enum MapType
    {
        SimpleMap,
        InteractiveMap,
        PositionalMap
    }

    [Parameter]
    public int Id { get; set; } = -1;
    
    [Parameter]
    public EventCallback<SportEvent>OnPosChange { get; set; }

    private JsInteropMapHelper? _jsInteropClasses;
    private DotNetObjectReference<Map>? _mapPosHelper;
    
    public void Dispose()
    {
        _mapPosHelper?.Dispose();
        _jsInteropClasses?.Dispose();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            switch (Type)
            {
                case MapType.SimpleMap:
                    await DrawSimpleMap();
                    break;
                case MapType.InteractiveMap:
                    await DrawInteractiveMap();
                    break;
                case MapType.PositionalMap:
                    await DrawPositionalMap();
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }
    }
    
    private async Task DrawSimpleMap()
    {
        await _jsRuntime.InvokeVoidAsync("simpleMap", SportEvent.Location.Latitude, SportEvent.Location.Longitude,GetUniqueId(Id));
    }
    
    private async Task DrawPositionalMap()
    {
        _jsInteropClasses = new JsInteropMapHelper(_jsRuntime, SportEvent, GetUniqueId(Id), OnPosChange);
        await _jsInteropClasses.InitPositionalMap();
    }
   
    private async Task DrawInteractiveMap()
    {
        await _jsRuntime.InvokeVoidAsync("interactiveMap", SportEvent.Location.Latitude, SportEvent.Location.Longitude, GetUniqueId(Id));
    }
}