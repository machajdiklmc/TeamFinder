@using TeamFinder.Shared.Models
@using TeamFinder.Shared
@using IdentityModel
@using TeamFinder.Client.Repository
@inject HttpClient _http
@inject UserRepository _userRepository
@inject AuthenticationStateProvider _provider

<div class="mat-layout-grid">
    @if (SportEvents != null)
    {
        <div class="mat-layout-grid-inner">
        @for (var i = RealRange.Item1; i < RealRange.Item2 && i < SportEvents.Count(); i++)
        {
            <div class="mat-layout-grid-cell-span-4">
                <EventCard User="@User" @bind-SportEvent="@SportEvents[i]" IsOnIndex=@i></EventCard>
            </div>
        }
        </div>
    }
</div>

@code
{
    [Parameter]
    public List<SportEvent>? SportEvents { get; set; }

    AuthenticationState? State { get; set; }
    private User User { get; set; } = new User();

    [Parameter]
    public Range? ViewRange { get; set; } = null;

    [Parameter]
    public int By { get; set; } = 4;

    public int SpanPerRow => 12 / By;

    private (int,int) RealRange
    {
        get
        {
            if (SportEvents is null)
                return (0,0);

            return ViewRange == null ? (0, SportEvents.Count()) : (ViewRange.Value.Start.Value, ViewRange.Value.End.Value);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        State = await _provider.GetAuthenticationStateAsync();
        User.Id = State.User.FindFirst(JwtClaimTypes.Subject)?.Value;
        User = await _userRepository.GetUser(User.Id!);
        SportEvents?.ForEach(e => e.Type = RelationshipType.None);
        for (int i = 0; i < SportEvents.Count; i++)
        {
            SportEvents[i].Type = RelationshipType.None;
            SportEvents[i].CountId = i+1;
        }
        var aaa = await _http.PostAsJsonAsync(Endpoints.GetUserEvents, new GetUserEventsRequest(User.Id, null));
        var userEvents = await aaa.Content.ReadFromJsonAsync<List<UserEvents>>();

        foreach (var ev in userEvents!)
        {
            var e = SportEvents?.Find(e => e.Id == ev.SportEventId);
            if (e is null) continue;
            e.Type = ev.Type;
        }
    }
}

