@using TeamFinder.Shared.Models
@using TeamFinder.Shared
@using IdentityModel
@using TeamFinder.Client.Pages.Models
@using SportEvent = TeamFinder.Client.Pages.Models.SportEvent
@inject HttpClient http
@inject AuthenticationStateProvider provider

<div class="mat-layout-grid">
    @if (SportEvents != null)
    {
        <div class="mat-layout-grid-inner">
        @for (var i = RealRange.Item1; i < RealRange.Item2 && i < SportEvents.Count(); i++)
        {
            <div class="mat-layout-grid-cell-span-3">
                <EventCard @bind-SportEvent="@SportEvents[i]"/>
            </div>
        }
        </div>
    }
</div>

@code
{
    [Parameter]
    public List<SportEvent>? SportEvents { get; set; }
    public AuthenticationState? State { get; set; }
    private User User { get; set; } = new User();
    [Parameter]
    public Range? ViewRange { get; set; } = null;

    [Parameter]
    public int By { get; set; } = 4;
    public int SpanPerRow => 12/By;
    private (int,int) RealRange
    {
        get
        {
            if (SportEvents is null)
                return (0,0);

            return ViewRange == null ? (0, SportEvents.Count()) : (ViewRange.Value.Start.Value, ViewRange.Value.End.Value);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        State = await provider.GetAuthenticationStateAsync();
        User.Id = State.User.FindFirst(JwtClaimTypes.Subject)?.Value;
        SportEvents?.ForEach(e => e.Type=RelationshipType.None);
        var aaa = await http.GetAsync(Endpoints.GetUserEvents + "?userId=" + User.Id);
        var userEvents = await aaa.Content.ReadFromJsonAsync<List<SportEvent>>();

        foreach (var ev in userEvents!)
        {
            var e = SportEvents?.Find(e => e.Id == ev.Id);
            if (e is null) continue;
            e.Type = ev.Type;
        }
    }

}
