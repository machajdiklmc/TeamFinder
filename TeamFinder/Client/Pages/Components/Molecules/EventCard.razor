@using MatBlazor
@using TeamFinder.Shared
@using TeamFinder.Shared.Models
@using System.Net
@using IdentityModel
@using Microsoft.AspNetCore.Components.Authorization
@using System.Diagnostics

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider provider
@inject HttpClient http

<style>
    .column {
      float: left;
      width: 50%;
    }
    
    .column2 {
      float: right;
      width: 50%;
      text-align: right;
    }

</style>
<MatCard class="demo-mat-card">
    <MatCardContent @onclick="@OnEventRedirect">
        <div class="demo-mat-card-content">
            <BingMap Height="200" SportEvent="@SportEvent" Id="@(IsOnIndex + 1)" IsSimpleMap="true"></BingMap>
            <MatHeadline6 class="demo-mat-card-clean-margin" Style="padding-left: 7px;">
                @SportEvent.Name
            </MatHeadline6>
            <MatSubtitle2 class="demo-mat-card" Style="padding-left: 7px; padding-right: 7px">
                <div class="row">
                    <div class="column">@SportEvent.Sport</div>
                    <div class="column2">@SportEvent.Location.City, @SportEvent.Date.ToShortDateString()</div>
                </div>
            </MatSubtitle2>

            <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin" style="padding-left: 7px; height:50px; max-height: 50px">
            @SportEvent?.Description
            </MatBody2>
        </div>
    </MatCardContent>
    <MatCardActions>
        <MatCardActionButtons>
            @if (SportEvent.Type == RelationshipType.Owner)
            {
                <MatButton Disabled="true">Owner</MatButton>  
            }
            else if (SportEvent.Type == RelationshipType.Joined)
            {
                <MatButton @onclick="OnUserClickLeaveEvent">Leave</MatButton>
            }
            else
            {
                <MatButton @onclick="OnUserClickJoinEvent">Join</MatButton>  
            }
        </MatCardActionButtons>
 
        <MatCardActionIcons>
            <MatButton Icon="@MatIconNames.People" OnClick="@OnPlayersExpand">People (@PeopleInEventCount)</MatButton>
        </MatCardActionIcons>
    </MatCardActions>
</MatCard>
<MatDialog @bind-IsOpen="@PlayersExpanded">
                <MatDialogTitle>People</MatDialogTitle>
    <MatDialogContent>
        @if (PeopleInEvent is not null)
        {
            @for (var i = 0; i< PeopleInEvent.Count; i++)
            {
                <p>@i. @PeopleInEvent[i].UserName</p>
            }
        }
    </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@(e => { PlayersExpanded = false; })">Close</MatButton>
                </MatDialogActions>
            </MatDialog>
@code
{
    public bool PlayersExpanded { get; set; }

    [Parameter]
    public User User { get; set; } = new User();

    public string UserId { get; set; }
    
    [Parameter]
    public int IsOnIndex { get; set; }
    private SportEvent _sportEvent = null!;
    int PeopleInEventCount { get; set; }
    List<User>? PeopleInEvent { get; set; }
    [Parameter, EditorRequired]
    public SportEvent SportEvent
    {
        get => _sportEvent;
        set
        {
            if (_sportEvent == value) return;
            _sportEvent = value;
            SportEventChanged.InvokeAsync(value);
        }

    }

    [Parameter]
    public EventCallback<SportEvent> SportEventChanged { get; set; }

    public AuthenticationState? State { get; set; }

    private void OnEventRedirect()
    {
        NavigationManager.NavigateTo($"/eventdetails/{SportEvent.Id}");
    }

    private void OnPlayersExpand(MouseEventArgs e)
    {
        PlayersExpanded = !PlayersExpanded;
    }

    protected override async Task OnInitializedAsync()
    {
        State = await provider.GetAuthenticationStateAsync();
        var userId = State.User.FindFirst(JwtClaimTypes.Subject)?.Value;
        if (userId != null) UserId = userId;
        var aaa = await http.PostAsJsonAsync(Endpoints.GetAllUsersInEvent, SportEvent?.Id);
        var userEvents = await aaa.Content.ReadFromJsonAsync<List<UserEvents>>();
        PeopleInEventCount = userEvents?.Count() ?? 0;
        PeopleInEvent = userEvents?.Select(ue => ue.User).ToList();
    }

    private async void OnUserClickLeaveEvent(MouseEventArgs obj)
    {
        var responseMessage = await http.PostAsJsonAsync(Endpoints.LeaveEvent, new UserEventsRequest(UserId,SportEvent.Id));

        var success = await responseMessage.Content.ReadFromJsonAsync<bool>();
        if (success)
        {
            SportEvent.Type = RelationshipType.None;
            if (PeopleInEvent?.Remove(User) == true)
                --PeopleInEventCount;
            try
            {
                await SportEventChanged.InvokeAsync(SportEvent);
            }
            catch (Exception e)
            {
                // ignored
            }
        }
    }

    private async void OnUserClickJoinEvent(MouseEventArgs obj)
    {
        var responseMessage = await http.PostAsJsonAsync(Endpoints.JoinEvent, new UserEventsRequest(UserId,SportEvent.Id));

        var success = await responseMessage.Content.ReadFromJsonAsync<bool>();

        if (success)
        {
            SportEvent.Type = RelationshipType.Joined;
            PeopleInEvent?.Add(User);
            ++PeopleInEventCount;
            try
            {
                await SportEventChanged.InvokeAsync(SportEvent);
            }
            catch (Exception e)
            {
                // ignored
            }
        }
    }
}
    