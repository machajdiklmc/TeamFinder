@using MatBlazor
@using TeamFinder.Shared
@using TeamFinder.Shared.Models
@using TeamFinder.Client.Pages.Models
@using System.Net
@using IdentityModel
@using Microsoft.AspNetCore.Components.Authorization
@using System.Diagnostics
@using SportEvent = TeamFinder.Client.Pages.Models.SportEvent

@inject AuthenticationStateProvider provider
@inject HttpClient http

<MatCard class="demo-mat-card">
    <div class="demo-mat-card-content">
        <MatHeadline6 class="demo-mat-card-clean-margin" @onclick="OnEventClick">
            @SportEvent?.Name
        </MatHeadline6>
        <MatSubtitle2 class="demo-mat-card-clean-margin">
            @SportEvent?.Date.ToShortDateString()
            <MatButton Icon="face" OnClick="@OnPlayersExpand">People (@PeopleInEventCount)</MatButton>
        </MatSubtitle2>
    </div>
    <MatCardContent @onclick="OnEventClick">
        
        <MatBody2 class="demo-mat-card-content demo-mat-card-clean-margin" style="padding: 6px;">
            @SportEvent?.Description
        </MatBody2>
    </MatCardContent>
    <MatCardActions>
        <MatCardActionButtons>
            @if (SportEvent is not null && SportEvent.Type == RelationshipType.Owner)
            {
                <MatButton Disabled="true">Owner</MatButton>  
            }
            else if (SportEvent is not null && SportEvent.Type == RelationshipType.Joined)
            {
                <MatButton @onclick="OnUserClickLeaveEvent">Leave</MatButton>
            }
            else
            {
                <MatButton @onclick="OnUserClickJoinEvent">Join</MatButton>  
            }
            
        </MatCardActionButtons>
 
        <MatCardActionIcons>
            <MatIconButton Icon="@MatIconNames.Favorite"></MatIconButton>
        </MatCardActionIcons>
    </MatCardActions>
</MatCard>
<MatDialog @bind-IsOpen="@PlayersExpanded">
                <MatDialogTitle>People</MatDialogTitle>
    <MatDialogContent>
        @if (PeopleInEvent is not null)
        {
            @for (var i = 0; i< PeopleInEvent.Count; i++)
            {
                <p>@i. @PeopleInEvent[i].UserName</p>
            }
        }
    </MatDialogContent>
                <MatDialogActions>
                    <MatButton OnClick="@(e => { PlayersExpanded = false; })">Close</MatButton>
                </MatDialogActions>
            </MatDialog>
<MatDialog @bind-IsOpen="@DialogIsOpen">
    <MatDialogTitle>Hi</MatDialogTitle>
    <MatDialogContent>
        <p>What's your favorite animal?</p>
        <MatSelect TValue="string" Label="Title">
            <MatOptionString ></MatOptionString>
            <MatOptionString Value="dr">Dr.</MatOptionString>
            <MatOptionString Value="prof">Prof.</MatOptionString>
        </MatSelect>


    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e => { DialogIsOpen = false; })">No Thanks</MatButton>
        <MatButton OnClick="@(e => { DialogIsOpen = false; })">Ok just close</MatButton>
    </MatDialogActions>
</MatDialog>
@code
{
    public bool PlayersExpanded { get; set; }

    [Parameter]
    public User User { get; set; } = new User();
    private SportEvent? _sportEvent;
    public int PeopleInEventCount { get; set; }
    public List<User>? PeopleInEvent { get; set; }
    [Parameter]
    public SportEvent? SportEvent
    {
        get => _sportEvent;
        set
        {
            if (_sportEvent == value) return;
            _sportEvent = value;
            SportEventChanged.InvokeAsync(value);
        }

    }

    [Parameter]
    public EventCallback<SportEvent> SportEventChanged { get; set; }

    public AuthenticationState? State { get; set; }
    
    private bool DialogIsOpen { get; set; }
    private void OnEventClick(MouseEventArgs obj)
    {
        DialogIsOpen = true;
    }

    private void OnPlayersExpand(MouseEventArgs e)
    {
        PlayersExpanded = !PlayersExpanded;
    }

    protected override async Task OnInitializedAsync()
    {
        State = await provider.GetAuthenticationStateAsync();
        User ??= new User() {Id = State.User.FindFirst(JwtClaimTypes.Subject)?.Value};
        var aaa = await http.PostAsJsonAsync(Endpoints.GetAllUsersInEvent, SportEvent?.Id);
        var userEvents = await aaa.Content.ReadFromJsonAsync<List<UserEvents>>();
        PeopleInEventCount = userEvents?.Count() ?? 0;
        PeopleInEvent = userEvents?.Select(ue => ue.User).ToList();
    }

    private async void OnUserClickLeaveEvent(MouseEventArgs obj)
    {
        var responseMessage = await http.PostAsJsonAsync<UserEvents>(Endpoints.LeaveEvent, new UserEvents()
        {
            UserId = User.Id,
            SportEventId = SportEvent!.Id,
            SportEvent = SportEvent.ToShared(""),
            User = User
        });

        var success = await responseMessage.Content.ReadFromJsonAsync<bool>();
        if (success)
        {
            SportEvent.Type = RelationshipType.None;
            if (PeopleInEvent?.Remove(User) == true)
                --PeopleInEventCount;
            try
            {
                await SportEventChanged.InvokeAsync(SportEvent);
            }
            catch (Exception e)
            {
                // ignored
            }
        }
    }

    private async void OnUserClickJoinEvent(MouseEventArgs obj)
    {
        var responseMessage = await http.PostAsJsonAsync<UserEvents>(Endpoints.JoinEvent, new UserEvents()
        {
            UserId = User.Id,
            SportEventId = SportEvent!.Id,
            SportEvent = SportEvent.ToShared(""),
            User = User
        });

        var success = await responseMessage.Content.ReadFromJsonAsync<bool>();

        if (success)
        {
            SportEvent.Type = RelationshipType.Joined;
            PeopleInEvent?.Add(User);
            ++PeopleInEventCount;
            try
            {
                await SportEventChanged.InvokeAsync(SportEvent);
            }
            catch (Exception e)
            {
                // ignored
            }
        }
    }
}
    