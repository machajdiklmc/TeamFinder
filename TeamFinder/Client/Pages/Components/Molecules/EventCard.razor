@using MatBlazor
@using TeamFinder.Shared
@using TeamFinder.Shared.Models
@using System.Net
@using IdentityModel
@using Microsoft.AspNetCore.Components.Authorization
@using System.Diagnostics
@using TeamFinder.Client.Services

@inject NavigationManager _navigationManager
@inject EventsService _eventsService
@inject HttpClient _http

<style>
    .column {
      float: left;
      width: 30%;
    }
    
    .column2 {
      float: right;
      width: 70%;
      text-align: right;
    }

</style>
<MatCard class="demo-mat-card">
    <MatCardContent @onclick="@OnEventRedirect">
        <div class="demo-mat-card-content">
            <Map Height="200" SportEvent="@SportEv" Id="@(IsOnIndex + 1)" Type="Map.MapType.SimpleMap"></Map>
            <MatHeadline6 Id="@($"name{IsOnIndex+1}")" class="demo-mat-card-clean-margin" Style="padding-left: 7px;">
                @SportEv.Name
            </MatHeadline6>
            <MatSubtitle2 class="demo-mat-card" Style="padding-left: 7px; padding-right: 7px">
                <div class="row">
                    <div id="sport@(IsOnIndex + 1)" class="column">@SportEv.Sport</div>
                    <div id="cityDate@(IsOnIndex + 1)" class="column2">@SportEv.Location.City, @SportEv.Date.ToLocalTime()</div>
                </div>
            </MatSubtitle2>

            <MatBody2 Id="@($"description{IsOnIndex+1}")" class="demo-mat-card-content demo-mat-card-clean-margin" style="padding-left: 7px; height:50px; max-height: 50px">
                @SportEv?.Description
            </MatBody2>
        </div>
    </MatCardContent>
    <MatCardActions>
        <MatCardActionButtons>
            <EventButton @bind-SportEv="@SportEv"
                         OnUserClickJoinEvent="@OnUserClickJoinEvent" 
                         OnUserClickLeaveEvent="@OnUserClickLeaveEvent"></EventButton>
        </MatCardActionButtons>
 
        <MatCardActionIcons>
            <MatButton Id="@($"showPeopleBtn{IsOnIndex+1}")" Icon="@MatIconNames.People" OnClick="@OnPlayersExpand">People (@PeopleInEvent.Count)</MatButton>
        </MatCardActionIcons>
    </MatCardActions>
    <PlayerListDialog @bind-PlayersExpanded="@PlayersExpanded" @bind-PeopleInEvent="PeopleInEvent"></PlayerListDialog>
</MatCard>

@code
{
    bool PlayersExpanded { get; set; } = false;

    [Parameter]
    public User User { get; set; } = new User();

    [Parameter]
    public int IsOnIndex { get; set; }
    
    List<User> PeopleInEvent { get; set; } = new();
    
    [Parameter]
    public SportEvent SportEv { get; set; } = null!;

    [Parameter]
    public EventCallback<SportEvent> SportEvChanged { get; set; }
    
    private void OnEventRedirect()
    {
        _navigationManager.NavigateTo($"/eventdetails/{SportEv.Id}");
    }

    private void OnPlayersExpand(MouseEventArgs e)
    {
        PlayersExpanded = true;
    }

    protected override async Task OnInitializedAsync()
    {
        var userEvents = await _eventsService.GetAllUsersInEvent(SportEv.Id);

        if (userEvents != null)
            PeopleInEvent = userEvents.Select(ue => ue.User).ToList();
    }

    private void OnUserClickLeaveEvent(string userId)
    {
        PeopleInEvent.Remove(User);
    }

    private void OnUserClickJoinEvent(string userId)
    {
        PeopleInEvent.Add(User);
    }
}
    