@using MatBlazor
@using Microsoft.Extensions.Options
@using TeamFinder.Shared.Models
@inject IJSRuntime JSRuntime
@inject IConfiguration Configuration
@inject IOptions<BingOptions> bing


<MatPaper Outlined="true" Rounded="true">
    <div id="map" style="@($"height:{Height}px;")"></div>

    <script suppress-error="BL9992" type="text/javascript">
        Loader.async = true;      	      
    </script>
</MatPaper>

@code {
    [Parameter, EditorRequired]
    public int Height { get; set; } 

    [Parameter]
    public SportEvent SportEvent { get; set; }
    
    [Parameter]
    public bool IsSimpleMap { get; set; }

    [Parameter]
    public int UniqueId { get; set; }
    //Configuration? Configuration;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsSimpleMap)
            await DrawSimpleMap();
        else
            await DrawMap();
    }

    private async Task DrawSimpleMap()
    {
        await JSRuntime.InvokeVoidAsync("simpleMap", SportEvent.Longitude, SportEvent.Latitude,UniqueId);
    }

    private async Task DrawMap()
    {
        try
        {
          /*  if (SportEvent.CountId is null)
                UniqueId = "map";
            else
                UniqueId = "map" + SportEvent.CountId;*/

            Console.WriteLine(UniqueId);
            await JSRuntime.InvokeVoidAsync("initMap", SportEvent.Longitude, SportEvent.Latitude);
            //await JSRuntime.InvokeVoidAsync("load");
            
        }
        catch (Exception e)
        {
            Console.WriteLine(UniqueId);
            Console.WriteLine(e);
        }
    }

}