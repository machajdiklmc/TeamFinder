@using TeamFinder.Shared.Models
@using TeamFinder.Client.Services
@using IdentityModel

@inject EventsService _eventsService
@inject AuthenticationStateProvider _provider

@if (UserId is null)
{
    <MatButtonLink Href="authentication/login">Login</MatButtonLink>   
}
else if (SportEv.Date < DateTime.Now)
{
    <MatButton Disabled="true">Finished</MatButton>  
}
else if (SportEv.Type == RelationshipType.Owner)
{
    <MatButton Disabled="true">Owner</MatButton>  
}
else if (SportEv.Type == RelationshipType.Joined)
{
    <MatButton @onclick="OnUserLeave">Leave</MatButton>
}
else
{
    <MatButton @onclick="OnUserJoin">Join</MatButton>  
}
@code {

    [Parameter, EditorRequired]
    public SportEvent SportEv { get; set; } = null!;

    [Parameter] 
    public EventCallback<string> OnUserClickJoinEvent { get; set; }
    
    [Parameter, EditorRequired] 
    public EventCallback<string> OnUserClickLeaveEvent { get; set; }
    
    [Parameter]
    public EventCallback<SportEvent> SportEvChanged { get; set; }
    
    string? UserId { get; set; }
    AuthenticationState? State { get; set; }
    protected override async Task OnInitializedAsync()
    {
        State = await _provider.GetAuthenticationStateAsync();
        var a = State.User.FindFirst(JwtClaimTypes.Subject);
        var userId = a?.Value;
        if (userId != null) UserId = userId;
    }

    
    private async Task OnUserLeave(MouseEventArgs obj)
    {
        var success = await _eventsService.LeaveEvent(new UserEventsRequest(UserId!, SportEv.Id));
        
        if (success == false) 
            return;
        
        SportEv.Type = RelationshipType.None;
        try
        {
            await SportEvChanged.InvokeAsync(SportEv);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        
        if(OnUserClickLeaveEvent.HasDelegate)
        await OnUserClickLeaveEvent.InvokeAsync(UserId);
    }

    private async Task OnUserJoin(MouseEventArgs obj)
    {
        var success = await _eventsService.JoinEvent(new UserEventsRequest(UserId!, SportEv.Id));

        if (success == false) 
            return;
        
        SportEv.Type = RelationshipType.Joined;
        try
        {
            await SportEvChanged.InvokeAsync(SportEv);
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
        
        if(OnUserClickJoinEvent.HasDelegate)
            await OnUserClickJoinEvent.InvokeAsync(UserId);
    }

}